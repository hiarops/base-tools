#!/usr/bin/python

from __future__ import absolute_import, division, print_function
from logging import error
from typing_extensions import Required

from ansible.module_utils.basic import AnsibleModule, get_platform
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}

DOCUMENTATION = """
---
module: kubeadm
version_added: "1.0"
short_description: xxx
description:
    - xxx
options:
    hosts:
        description:
            - A list of ZooKeeper servers (format '[server]:[port]').
        required: true
    name:
        description:
            - The path of the znode.
        required: true
    value:
        description:
            - The value assigned to the znode.
    op:
        description:
            - An operation to perform. Mutually exclusive with state.
    state:
        description:
            - The state to enforce. Mutually exclusive with op.
    timeout:
        description:
            - The amount of time to wait for a node to appear.
        default: 300
    recursive:
        description:
            - Recursively delete node and all its children.
        type: bool
        default: 'no'
        version_added: "2.1"
requirements:
    - kazoo >= 2.1
    - python >= 2.6
author: "Trey Perry (@treyperry)"
"""

EXAMPLES = """
# Creating or updating a znode with a given value
- znode:
    hosts: 'localhost:2181'
    name: /mypath
    value: myvalue
    state: present
"""


class KubeadmModule(object):
    def __init__(self, module):
        self.module = module
        self.args = self.module.params

        self.kubeadm_cmd = self.module.get_bin_path('kubeadm', required=True)

        self.process()
    
    def process(self):

        self.platform = get_platform().lower()
        

    (rc, out, err) = module.run_command("s% s% 's%'" % (system, action, util))


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(type='str'),
            cidr_addr=dict(type='str'),
            role=dict(type='str', choice=""),
            cluster_addr=dict(type='str'),
        ),
        supports_check_mode=True,
    )


    if module.params['master']:
        kubeadm += init
    elif module.params['node']:
        kubeadm += join


    result = KubeadmModule(module)

    module.exit_json(changed=result.changed)

if __name__ == 'main':
    main()